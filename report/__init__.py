"""report package

Expose a package-level generate_pdf(...) API used by the UI.
Note: There is also a top-level report.py module in the repo. Since packages
take precedence on import, `import report` refers to this package, not the
module. To avoid AttributeError, we implement generate_pdf here.
"""

from __future__ import annotations

from io import BytesIO
from typing import Any, Dict, List
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.lib.utils import simpleSplit


THEME = {
    "brand": colors.HexColor("#2D6CDF"),
    "brand_light": colors.HexColor("#E8F0FE"),
    "text": colors.HexColor("#111827"),
    "muted": colors.HexColor("#6B7280"),
    "card_bg": colors.HexColor("#F9FAFB"),
    "border": colors.HexColor("#E5E7EB"),
}

MARGINS = {
    "left": inch * 0.75,
    "right": inch * 0.75,
    "top": inch * 0.9,
    "bottom": inch * 0.8,
}

def _kv(c: canvas.Canvas, x: float, y: float, label: str, value: str, width: float) -> float:
    c.setFont("Helvetica-Bold", 9)
    c.setFillColor(THEME["muted"]) 
    c.drawString(x, y, f"{label}:")
    c.setFont("Helvetica", 9)
    c.setFillColor(THEME["text"]) 
    text = str(value or "")
    avail = width - (x + 90)
    lines = simpleSplit(text, "Helvetica", 9, avail)
    c.drawString(x + 90, y, lines[0] if lines else "")
    drop = 12
    if len(lines) > 1:
        for ln in lines[1:3]:
            y -= 12
            c.drawString(x + 90, y, ln)
            drop += 12
    return y - 12


def _bullets(c: canvas.Canvas, x: float, y: float, items: List[str], width: float, max_items: int = 8) -> float:
    c.setFont("Helvetica", 10)
    c.setFillColor(THEME["text"]) 
    for it in items[:max_items]:
        bullet = "â€¢ "
        lines = simpleSplit(str(it), "Helvetica", 10, width - x - 6)
        if not lines:
            continue
        c.drawString(x, y, bullet + lines[0])
        y -= 12
        for ln in lines[1:]:
            c.drawString(x + 14, y, ln)
            y -= 12
    return y

def _section_header(c: canvas.Canvas, x: float, y: float, width: float, title: str) -> float:
    # Draw a subtle card background with left brand bar
    card_h = 22
    c.setFillColor(THEME["card_bg"])
    c.setStrokeColor(THEME["border"]) 
    c.rect(x, y - card_h + 6, width - x - MARGINS["right"], card_h, stroke=1, fill=1)
    c.setFillColor(THEME["brand"]) 
    c.rect(x, y - card_h + 6, 6, card_h, stroke=0, fill=1)
    c.setFont("Helvetica-Bold", 12)
    c.setFillColor(THEME["text"]) 
    c.drawString(x + 14, y - 8, title)
    return y - 26

def _footer(c: canvas.Canvas, width: float, height: float):
    c.setStrokeColor(THEME["border"]) 
    c.line(MARGINS["left"], MARGINS["bottom"], width - MARGINS["right"], MARGINS["bottom"])
    c.setFont("Helvetica", 8)
    c.setFillColor(THEME["muted"]) 
    c.drawString(MARGINS["left"], MARGINS["bottom"] - 10, "Generated by LogSense")
    c.drawRightString(width - MARGINS["right"], MARGINS["bottom"] - 10, f"Page {c.getPageNumber()}")

def _new_page(c: canvas.Canvas, width: float, height: float) -> tuple[float, float]:
    _footer(c, width, height)
    c.showPage()
    c.setFillColor(THEME["text"]) 
    return MARGINS["left"], height - MARGINS["top"]


def generate_pdf(
    events: List[Any],
    metadata: Dict[str, Any],
    test_results: List[Dict[str, Any]],
    recommendations: Any,
    user_name: str,
    app_name: str,
    ai_summary: str | None = None,
    user_context: Dict[str, Any] | None = None,
) -> bytes:
    """Builds a compact PDF report and returns bytes.

    Matches the signature used by skc_log_analyzer.py.
    """
    buf = BytesIO()
    c = canvas.Canvas(buf, pagesize=A4)
    width, height = A4
    x, y = MARGINS["left"], height - MARGINS["top"]

    # Header bar
    c.setFillColor(THEME["brand"]) 
    c.rect(0, height - 36, width, 36, stroke=0, fill=1)
    c.setFont("Helvetica-Bold", 16)
    c.setFillColor(colors.white)
    c.drawString(MARGINS["left"], height - 24, "LogSense Analysis Report")
    c.setFont("Helvetica", 9)
    c.drawRightString(width - MARGINS["right"], height - 22, f"Application: {app_name}")
    y = height - MARGINS["top"] - 18

    # User context (if any)
    if user_context:
        y = _section_header(c, x, y, width, "Execution Context")
        for k in [
            "app_version", "test_environment", "deployment_method",
            "issue_severity", "issue_description", "build_changes",
            "reproduction_steps",
        ]:
            if k in user_context and user_context[k]:
                y = _kv(c, x, y, k.replace("_", " ").title(), str(user_context[k]), width)
            if y < MARGINS["bottom"] + 48:
                x, y = _new_page(c, width, height)
        y -= 6

    # System metadata
    y = _section_header(c, x, y, width, "System Metadata")
    for k, v in list(metadata.items())[:30]:
        y = _kv(c, x, y, str(k), str(v), width)
        if y < MARGINS["bottom"] + 48:
            x, y = _new_page(c, width, height)

    # Key events (Errors)
    errs = [ev for ev in events if getattr(ev, "severity", "").upper() in ("ERROR", "CRITICAL")]
    y = _section_header(c, x, y, width, "Key Events (Top 5 Errors)")
    lines = []
    for ev in errs[:5]:
        ts = getattr(ev, "timestamp", "")
        comp = getattr(ev, "component", "")
        sev = getattr(ev, "severity", "")
        msg = getattr(ev, "message", "")
        lines.append(f"[{ts}] {comp} - {sev}: {str(msg)[:140]}")
    if not lines:
        lines = ["No ERROR or CRITICAL events found."]
    y = _bullets(c, x, y, lines, width)
    y -= 6

    # Recommendations
    if recommendations:
        y = _section_header(c, x, y, width, "Recommendations")
        rec_list = recommendations
        if isinstance(recommendations, dict) and recommendations.get("recommendations"):
            rec_list = recommendations["recommendations"]
        rec_lines = []
        for rec in rec_list:
            if isinstance(rec, dict):
                sev = rec.get("severity", "INFO")
                msg = rec.get("message", "")
                cat = rec.get("category", "N/A")
                act = rec.get("action", "")
                line = f"- {sev}: {msg} [Category: {cat}]"
                if act:
                    line += f" Action: {act}"
            else:
                line = f"- {rec}"
            rec_lines.append(line)
        y = _bullets(c, x, y, rec_lines, width)
        y -= 6

    # Summary (KPIs and highlights)
    try:
        from collections import Counter
        y = _section_header(c, x, y, width, "Summary")
        total = len(events)
        errs = [ev for ev in events if getattr(ev, "severity", "").upper() in ("ERROR", "CRITICAL")]
        warns = [ev for ev in events if getattr(ev, "severity", "").upper() == "WARNING"]
        top_comps = Counter([getattr(e, "component", "") for e in errs if getattr(e, "component", None)]).most_common(3)
        ts_vals = [getattr(ev, "timestamp", None) for ev in events if getattr(ev, "timestamp", None)]
        ts_vals = sorted(ts_vals) if ts_vals else []
        lines = [
            f"Total events: {total}",
            f"Errors/Critical: {len(errs)} | Warnings: {len(warns)}",
        ]
        if top_comps:
            lines.append("Top error-prone components: " + ", ".join([f"{c} ({n})" for c, n in top_comps]))
        if ts_vals:
            lines.append(f"Time range: {ts_vals[0]} .. {ts_vals[-1]}")
        y = _bullets(c, x, y, lines, width)
        y -= 6
    except Exception:
        pass

    # Conclusion (short narrative)
    try:
        y = _section_header(c, x, y, width, "Conclusion")
        c.setFont("Helvetica", 10)
        c.setFillColor(THEME["text"]) 
        conclusion_text = None
        if ai_summary:
            # Use the first paragraph of the AI summary as conclusion if available
            conclusion_text = str(ai_summary).split("\n\n")[0]
        else:
            # Compute locals safely to avoid dependency on Summary block
            warns_local = [ev for ev in events if getattr(ev, "severity", "").upper() == "WARNING"]
            try:
                from collections import Counter as _Counter
                top_comps_local = _Counter([getattr(e, "component", "") for e in errs if getattr(e, "component", None)]).most_common(3)
            except Exception:
                top_comps_local = []

            if errs:
                comp_summary = ", ".join([c for c, _ in top_comps_local]) if top_comps_local else "various components"
                conclusion_text = (
                    f"The analysis detected {len(errs)} error/critical events and {len(warns_local)} warnings across {comp_summary}. "
                    f"Address the highest-frequency error sources first and re-run tests to confirm stability."
                )
            else:
                conclusion_text = "No critical errors were found. The system appears stable under the analyzed logs."

        # Wrapped paragraph
        lines = simpleSplit(conclusion_text, "Helvetica", 10, width - MARGINS["left"] - MARGINS["right"])
        for ln in lines:
            c.drawString(x, y, ln)
            y -= 12
            if y < MARGINS["bottom"] + 36:
                x, y = _new_page(c, width, height)
        y -= 6
    except Exception:
        pass

    # AI Summary
    if ai_summary:
        y = _section_header(c, x, y, width, "Root Cause Summary")
        c.setFont("Helvetica", 10)
        for para in str(ai_summary).split("\n"):
            if not para.strip():
                y -= 6
                continue
            lines = simpleSplit(para, "Helvetica", 10, width - MARGINS["left"] - MARGINS["right"])
            for ln in lines:
                c.drawString(x, y, ln)
                y -= 12
                if y < MARGINS["bottom"] + 36:
                    x, y = _new_page(c, width, height)

    _footer(c, width, height)
    c.showPage()
    c.save()
    buf.seek(0)
    return buf.read()

