name: Deploy to Modal

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REQUIRE_DEPLOY_TAG: "true"
  DEPLOY_TAG: "[deploy]"

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: "3.11"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-*.txt

      - name: Cache venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            venv-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-

      - name: Create venv & install deps
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install -U pip wheel modal
          if ls requirements*.txt >/dev/null 2>&1; then
            pip install -r requirements.txt || true
            for f in requirements-*.txt; do [ -f "$f" ] && pip install -r "$f"; done
          fi

      - name: Static guards (ASGI, GPU, security strings)
        run: |
          python - << 'PY'
          import pathlib, re, sys
          # Check production entry point
          prod_entry = pathlib.Path("modal_haiec_production.py")
          if not prod_entry.exists():
              print(f"FAIL: Production entry point {prod_entry} not found."); sys.exit(1)
          p = prod_entry.read_text(encoding="utf-8", errors="ignore")
          if len(re.findall(r"@modal\.asgi_app\(", p)) != 1:
              print(f"FAIL: expected exactly one @modal.asgi_app() in {prod_entry}"); sys.exit(1)
          if re.search(r'@app\.function\([^)]*gpu=', p):
              print(f"FAIL: web ASGI in {prod_entry} must not request GPU"); sys.exit(1)
          if re.search(r'^from\s+fastapi\s+import|^import\s+fastapi', p, flags=re.M):
              print(f"FAIL: fastapi imported at top level in {prod_entry}; must be inside ASGI function"); sys.exit(1)
          # Check staging entry point
          staging_entry = pathlib.Path("modal_haiec_staging.py")
          if not staging_entry.exists():
              print(f"FAIL: Staging entry point {staging_entry} not found."); sys.exit(1)
          # Check for security signatures across the entire codebase
          expect = [
            "LogSense Enterprise v2.0.0 - Compliant Processing Engine",
            "LogSense Enterprise v2.0.0 - Error Handler",
          ]
          # Read all python files to check for signatures
          all_code = ""
          for path in pathlib.Path('.').rglob('*.py'):
              all_code += path.read_text(encoding="utf-8", errors="ignore")
          for s in expect:
              if s not in all_code:
                  print(f"FAIL: missing enterprise signature marker: {s}"); sys.exit(1)
          print("Static guards passed")
          PY

      - name: Deploy to staging
        env:
          MODAL_TOKEN_ID: ${{ secrets.MODAL_TOKEN_ID }}
          MODAL_TOKEN_SECRET: ${{ secrets.MODAL_TOKEN_SECRET }}
        run: |
          . .venv/bin/activate
          modal deploy modal_haiec_staging.py

      - name: Smoke tests (staging)
        env:
          BASE_URL: https://haiec--logsense-staging-web-app.modal.run
        run: |
          set -euo pipefail
          sleep 15 # Wait for app to be available
          curl -fsSL "$BASE_URL/health" | tee /tmp/health.json
          python -c 'import json,sys;d=json.load(open("/tmp/health.json")); assert d.get("status")=="ok", d; assert "canary" in d, d'

          curl -fI "$BASE_URL/" | awk 'NR==1{print}'

          printf "2025-08-24T14:00:00Z INFO User login ok\n" > sample.log
          printf "dummy" > invalid.bin

          curl -fsS -X POST "$BASE_URL/upload" -F "file=@sample.log;type=text/plain" -o /tmp/upload.json
          cat /tmp/upload.json
          python -c 'import json,sys;d=json.load(open("/tmp/upload.json")); assert d.get("status")=="success", d; assert "COMP-" in d.get("signature", ""), d'

          (curl -s -o /dev/null -w "%{http_code}" -X POST "$BASE_URL/upload" -F "file=@invalid.bin") | tee /tmp/rc.txt
          test "$(cat /tmp/rc.txt)" = "400"

      - name: Deploy to production (guarded)
        if: success() && (!env.REQUIRE_DEPLOY_TAG || contains(github.event.head_commit.message, env.DEPLOY_TAG))
        env:
          MODAL_TOKEN_ID: ${{ secrets.MODAL_TOKEN_ID }}
          MODAL_TOKEN_SECRET: ${{ secrets.MODAL_TOKEN_SECRET }}
        run: |
          . .venv/bin/activate
          modal deploy modal_haiec_production.py

      - name: Sanity check (production)
        if: success() && (!env.REQUIRE_DEPLOY_TAG || contains(github.event.head_commit.message, env.DEPLOY_TAG))
        env:
          BASE_URL: https://haiec--logsense-production-web-app.modal.run
        run: |
          set -euo pipefail
          sleep 15 # Wait for app to be available
          curl -fsSL "$BASE_URL/health" | tee /tmp/phealth.json
          python -c 'import json,sys;d=json.load(open("/tmp/phealth.json")); assert d.get("status")=="ok", d'
